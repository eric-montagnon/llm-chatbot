[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".git",
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    "*.egg-info"
]
typeCheckingMode = "standard"
pythonVersion = "3.9"
pythonPlatform = "All"
venvPath = "."
venv = ".venv"

# Type checking settings
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportOptionalSubscript = "warning"
reportOptionalMemberAccess = "warning"
reportOptionalCall = "warning"
reportOptionalIterable = "warning"
reportOptionalContextManager = "warning"
reportOptionalOperand = "warning"
reportTypedDictNotRequiredAccess = "warning"
reportUntypedFunctionDecorator = "none"
reportUntypedClassDecorator = "none"
reportUntypedBaseClass = "none"
reportUntypedNamedTuple = "warning"
reportPrivateUsage = "warning"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "warning"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownVariableType = "none"
reportUnknownMemberType = "none"
reportMissingTypeArgument = "warning"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "none"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "none"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "warning"
reportUnsupportedDunderAll = "warning"
reportUnusedCoroutine = "error"
reportUnnecessaryTypeIgnoreComment = "information"
reportMatchNotExhaustive = "warning"
reportShadowedImports = "warning"

[project]
name = "llm-chatbot"
version = "0.1.0"
description = "A minimal LLM chatbot using Streamlit"
requires-python = ">=3.9"
dependencies = [
    "streamlit>=1.36",
    "openai>=1.30.0",
    "mistralai>=1.0.0",
    "python-dotenv>=1.0.1",
]

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
